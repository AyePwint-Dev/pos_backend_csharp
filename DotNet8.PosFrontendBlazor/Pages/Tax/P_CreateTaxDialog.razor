@using DotNet8.PosFrontendBlazor.Models.Tax
<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="requestModel.FromAmount" Label="From Amount" Variant="MudBlazor.Variant.Text" InputType="InputType.Number"></MudTextField>
        <MudTextField @bind-Value="requestModel.ToAmount" Label="To Amount" Variant="MudBlazor.Variant.Text" InputType="InputType.Number"></MudTextField>
        <MudTextField @bind-Value="requestModel.Percentage" Label="Percentage" Variant="MudBlazor.Variant.Text" InputType="InputType.Number"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveAsync">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    TaxModel requestModel = new();

    void Cancel() => MudDialog?.Cancel();

    public async Task SaveAsync()
    {
        if (requestModel.FromAmount <= 0 || requestModel.FromAmount is null)
        {
            InjectService.ShowMessage("From Amount is invalid.", EnumResponseType.Warning);
            return;
        }

        if (requestModel.ToAmount <= 0 || requestModel.ToAmount is null)
        {
            InjectService.ShowMessage("To Amount is invalid.", EnumResponseType.Warning);
            return;
        }

        if (requestModel.Percentage == 100 || requestModel.Percentage > 100 || requestModel.Percentage is null)
        {
            InjectService.ShowMessage("Percentage is invalid.", EnumResponseType.Warning);
            return;
        }

        if (requestModel.FromAmount >= requestModel.ToAmount)
        {
            InjectService.ShowMessage("From Amount must be less than To Amount", EnumResponseType.Warning);
            return;
        }

        requestModel.FromAmount = Convert.ToInt32(requestModel.FromAmount);
        requestModel.ToAmount = Convert.ToInt32(requestModel.ToAmount);
        requestModel.Percentage = Convert.ToInt32(requestModel.Percentage);

        var response = await HttpClientService.ExecuteAsync<TaxResponseModel>(
            Endpoints.Tax,
            EnumHttpMethod.Post,
            requestModel);

        if (response.IsError)
        {
            InjectService.ShowMessage(response.Message, EnumResponseType.Error);
            return;
        }

        InjectService.ShowMessage(response.Message, EnumResponseType.Success);
        MudDialog?.Close();
    }
}