@page "/sale-invoice"
@using DotNet8.PosFrontendBlazor.Models.SaleInvoice
@using Newtonsoft.Json

@if (ResponseModel is not null)
{
    <MudGrid>
        <MudItem xs="9">
            <MudPaper Class="d-flex align-center justify-center mud-width-full mud-height-full py-8">
                <MudGrid>
                    @foreach (var item in ResponseModel.Data.Product)
                    {
                        <MudItem xs="4">
                            <MudPaper>
                                <div class="d-flex justify-center" Elevation="25">
                                    <MudLink OnClick="@(()=>AddItem(item))" Underline="Underline.None">
                                        <MudImage ObjectPosition="ObjectPosition.Center" Src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTnciW5w-jCOnI1XnAhc1RuNq5BgYubMy5Zhw&s" Alt="@item.ProductName" Elevation="25" Class="rounded-lg" Width="100" />
                                    </MudLink>
                                </div>
                                <MudText Align="Align.Center" Typo="Typo.body2">@item.Price</MudText>
                                <MudText Align="Align.Center" Typo="Typo.body2">@item.ProductName</MudText>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <MudGrid>
                    @if (lstSaleInvoice is not null && lstSaleInvoice.Count > 0)
                    {
                        @foreach (var product in lstSaleInvoice)
                        {
                            if (product.Quantity > 0)
                            {
                                <MudItem xs="12">
                                    <MudPaper Elevation="0">
                                        <div class="d-flex align-center  ml-8 ">
                                            <MudImage ObjectPosition="ObjectPosition.Center" Src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTnciW5w-jCOnI1XnAhc1RuNq5BgYubMy5Zhw&s" Elevation="25" Class="rounded-lg" Width="50" />
                                            <MudText Align="Align.Center" Class="pa-2">@product.ProductName</MudText>
                                            <MudText Align="Align.Right">@product.Amount  </MudText>
                                        </div>
                                        <div>
                                            <div class="d-flex align-center ml-16 ">
                                                <MudText Align="Align.Left">
                                                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="@(()=>IncreaseCount(product))"> </MudIconButton>
                                                </MudText>
                                                <MudText Align="Align.Center" Typo="Typo.body2">@product.Quantity</MudText>
                                                <MudText Align="Align.Right" Typo="Typo.body2">
                                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="@(()=>DecreaseCount(product))"></MudIconButton>
                                                </MudText>
                                            </div>
                                        </div>

                                    </MudPaper>
                                </MudItem>
                            }
                        }
                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="mt-4 text-white ml-2  mr-2" Style="@($"background:#006064;color:#FFFFFF;height:80%;")">
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.body2" Align="Align.Left" Class="ml-4 mt-2">@lstSaleInvoice.Sum(x => x.Amount)</MudText>
                                    </MudItem>
                                    <MudItem xs="6" Class="d-flex align-items-center justify-end mb-4">
                                        <MudButton Align="Align.Right" Style="color: white;">Pay ></MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    }

                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>

}

@code {
    private ProductListResponseModel? ResponseModel;
    private List<SaleInvoiceDetailModel>? lstSaleInvoice = new List<SaleInvoiceDetailModel>();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await InjectService.EnableLoading();
            await List();
            StateHasChanged();
            await InjectService.DisableLoading();
        }
    }

    private async Task List()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<ProductListResponseModel>(Endpoints.Product, EnumHttpMethod.Get);
    }
    private void AddItem(ProductModel requestModel)
    {
        SaleInvoiceDetailModel saleInvoiceDetail = new SaleInvoiceDetailModel
            {
                ProductCode = requestModel.ProductCode,
                ProductName = requestModel.ProductName,
                Price = requestModel.Price,
            };

        if (!lstSaleInvoice.Where(x=>x.ProductCode==requestModel.ProductCode).Any())
        {
            saleInvoiceDetail.Quantity = 1;
            saleInvoiceDetail.Amount = requestModel.Price;
            lstSaleInvoice!.Add(saleInvoiceDetail);
        }
        else
        {
            lstSaleInvoice.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Quantity += 1;
            lstSaleInvoice.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Amount += requestModel.Price;
        }
        Console.WriteLine(lstSaleInvoice.Select(x => x.Price * x.Quantity).Sum());
    }

    private void IncreaseCount(SaleInvoiceDetailModel requestModel)
    {
        requestModel.Quantity += 1;
        lstSaleInvoice!.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Quantity = requestModel.Quantity; ;
        lstSaleInvoice!.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Amount = (requestModel.Price * requestModel.Quantity);
    }

    private void DecreaseCount(SaleInvoiceDetailModel requestModel)
    {
        if (requestModel.Quantity > 0)
        {
            requestModel.Quantity += -1;
            lstSaleInvoice!.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Quantity = requestModel.Quantity;
            lstSaleInvoice!.Where(x => x.ProductCode == requestModel.ProductCode).FirstOrDefault()!.Amount = (requestModel.Price * requestModel.Quantity);
        }
    }
}
