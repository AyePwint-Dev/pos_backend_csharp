@page "/customer"
@using DotNet8.PosFrontendBlazor.Models.Customer

<MudText Typo="Typo.h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Create" OnClick="Popup"></MudIconButton>
    Customer
</MudText>

@if (ResponseModel is not null)
{
    int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>No.</th>
                <th>Customer Code</th>
                <th>Customer Name</th>
                <th>Mobile No</th>
                <th>Date Of Birth</th>
                <th>Gender</th>
                <th>State Code</th>
                <th>Township Code</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data.Customer)
            {
                <tr>
                    <td>@(++count)</td>
                    <td>@item.CustomerCode</td>
                    <td>@item.CustomerName</td>
                    <td>@item.MobileNo</td>
                    <td>@item.DateOfBirth?.ToString("dd-MMM-yyyy")</td>
                    <td>@item.Gender</td>
                    <td>@item.StateCode</td>
                    <td>@item.TownshipCode</td>
                    <td>
                        <MudButton OnClick="() => EditPopup(item.CustomerId, item.CustomerName, item.MobileNo, item.DateOfBirth, item.Gender, item.StateCode, item.TownshipCode)" Variant=" MudBlazor.Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                        <MudButton OnClick="() => DeletePopUp(item.CustomerId)" Variant="MudBlazor.Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
    private CustomerListResponseModel? ResponseModel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InjectService.EnableLoading();
            await List();
            StateHasChanged();
            await InjectService.DisableLoading();
        }
    }

    private async Task List()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<CustomerListResponseModel>(
            Endpoints.Customer,
            EnumHttpMethod.Get
        );
    }

    private async Task Popup()
    {
        DialogResult result = await InjectService.ShowModalBoxAsync<P_CustomerDialog>("New Customer");

        if (!result.Canceled)
            await List();
    }

    private async Task EditPopup(int CustomerId, string CustomerName, string MobileNo, DateTime? DateOfBirth, string Gender, string StateCode, string TownshipCode)
    {
        CustomerParamsModel model = new(CustomerId, CustomerName, MobileNo, DateOfBirth, Gender, StateCode, TownshipCode);

        var parameters = new DialogParameters<P_CustomerDialog>();
        parameters.Add(x => x.model, model);

        DialogResult result = await InjectService.ShowModalBoxAsync<P_CustomerDialog>("Edit Customer", parameters);

        if (!result.Canceled)
            await List();
    }

    private async Task DeletePopUp(int id)
    {
        var parameters = new DialogParameters<P_DeleteCustomerDialog>()
        {
            {"id", id}
        };
        DialogResult result = await InjectService.ShowModalBoxAsync<P_DeleteCustomerDialog>("Delete Customer", parameters);

        if (!result.Canceled)
            await List();
    }
}