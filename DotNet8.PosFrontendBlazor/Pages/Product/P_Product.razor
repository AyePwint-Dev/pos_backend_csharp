@page "/product"

<MudText Typo="Typo.h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Create" OnClick="@(()=>Popup("New Product"))"></MudIconButton>
    Product
</MudText>


@if (ResponseModel is not null)
{
    int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>No.</th>
                <th>Product Code</th>
                <th>Product Name</th>
                <th>Product Category Name</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data.Product)
            {
                <tr>
                    <td>@(++count)</td>
                    <td>@item.ProductCode</td>
                    <td>@item.ProductName</td>
                    <td>@item.ProductCategoryCode</td>
                    <td>@item.Price</td>
                    <td>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" OnClick="@(()=>Popup("Edit Township"))">Edit</MudButton>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(()=>Delete(item.ProductId))">Delete</MudButton>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}


@code {
    private ProductListResponseModel? ResponseModel;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await InjectService.EnableLoading();
            await List();
            StateHasChanged();
            await InjectService.DisableLoading();
        }
    }

    private async Task List()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<ProductListResponseModel>(Endpoints.Product, EnumHttpMethod.Get);
    }

    private async Task Popup(string title)
    {
        //MudBlazor.DialogOptions maxWidth = new MudBlazor.DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        //var dialog = await DialogService.ShowAsync<P_ProductDialog>("New Product", maxWidth);
        //var result = await dialog.Result;

        var result = await InjectService.ShowModalBoxAsync<P_ProductDialog>(title);
        if (!result.Canceled)
        {
            await List();
        }
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters<P_ProductDeleteDialog>();
        parameters.Add(x => x.contentText, "Are you sure you want to delete?");
        parameters.Add(x => x.productId, id);

        var options = new MudBlazor.DialogOptions() { 
            CloseButton = true, 
            MaxWidth = MaxWidth.ExtraSmall 
        };

        var result = await InjectService.ShowModalBoxAsync<P_ProductDeleteDialog>("Delete", parameters);
        if (!result.Canceled)
        {
            await List();
        }
    }

}
